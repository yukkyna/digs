<?php

namespace Digs\EntryBundle\Entity;

use Doctrine\ORM\EntityRepository;

/**
 * EntryRepository
 *
 * This class was generated by the Doctrine ORM. Add your own custom
 * repository methods below.
 */
class EntryRepository extends EntityRepository
{
	public function findOpenedDscQueryBuilder($search, $tag, $member)
	{
		$qb = $this
            ->createQueryBuilder('e')
			->select('e, m, p')
			->leftJoin('e.member', 'm')
			->leftJoin('m.profile', 'p')
            ->where('e.status = 1')
			->orderBy('e.id', 'DESC')
            ;
		if ($search)
		{
            $list = \preg_split("/[\s　]+/u", $search, -1, PREG_SPLIT_NO_EMPTY);
            $i = 0;
            foreach ($list as $word)
            {
                // TODO 他に方法は?
                $word = mb_ereg_replace('\\\\','\\\\',$word);
                $word = mb_ereg_replace('%','\%',$word);
                $word = mb_ereg_replace('_','\_',$word);
//echo "[".$search.":".$list."-".$word."]"; die;
				
                $qb->andWhere(
					$qb->expr()->orX(
						$qb->expr()->like("e.title", ":title".$i),
						$qb->expr()->like("e.escapedMessage", ":message".$i)
						)
					)->setParameter("title".$i, "%".$word."%")
					->setParameter("message".$i, "%".$word."%");
                $i ++;
            }
		}
		if ($tag)
		{
			$qb->leftJoin('e.tags', 't')
				->andWhere('t.name = :tag')
				->setParameter('tag', $tag)
			; 
		}
		if ($member != null)
		{
			$qb
				->andWhere('m.id=:member')
				->setParameter('member', $member)
				;
		}
		return $qb;
	}
	
	public function findOpenedDsc($num)
	{
        return $this
            ->createQueryBuilder('e')
			->select('e, m, p, t')
			->leftJoin('e.member', 'm')
			->leftJoin('m.profile', 'p')
			->leftJoin('e.tags', 't')
            ->where('e.status = 1')
			->orderBy('e.id', 'DESC')
			->setMaxResults($num)
			->getQuery()->getResult();
	}

	public function findOpenedByMemberDsc($member, $num)
	{
        return $this->findOpenedDscQueryBuilder(null, null, $member->getId())
			->setMaxResults($num)->getQuery()->getResult();
	}

	public function findByIdOpenedJoinMember($id)
	{
        return $this
            ->createQueryBuilder('u')
			->select('u, m, p, c, k, l')
			->leftJoin('u.member', 'm')
			->leftJoin('m.profile', 'p')
			->leftJoin('u.comments', 'c')
			->leftJoin('c.member', 'k')
			->leftJoin('k.profile', 'l')
            ->where('u.status = 1')
			->andWhere('u.id=:id')
			->orderBy('c.createdAt', 'DESC')
            ->setParameter('id', $id)
            ->getQuery()
			->getSingleResult();
	}
}
