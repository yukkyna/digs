<?php

namespace Digs\CoreBundle\Entity;

use Symfony\Component\Security\Core\User\UserInterface;
use Symfony\Component\Security\Core\User\UserProviderInterface;
use Symfony\Component\Security\Core\Exception\UsernameNotFoundException;
use Symfony\Component\Security\Core\Exception\UnsupportedUserException;
use Doctrine\ORM\EntityRepository;
use Doctrine\ORM\NoResultException;

/**
 * MemberRepository
 *
 * This class was generated by the Doctrine ORM. Add your own custom
 * repository methods below.
 */
class MemberRepository extends EntityRepository implements UserProviderInterface
{
    public function findJoinGroupAndRole($id = null) {
        $query = $this
            ->createQueryBuilder('u')
			->select('u, p, g, r')
            ->leftJoin('u.profile', 'p')
			->leftJoin('u.groups', 'g')
			->leftJoin('u.roles', 'r')
			->orderBy('u.id', 'ASC');
        if ($id) {
            return $query
            ->andWhere('u.id=:id')
            ->setParameter('id', $id)
            ->getQuery()
			->getSingleResult();
        }
        return $query->getQuery()->getResult();
    }
    
	public function findActiveByGroup($groups)
	{
        return $this
            ->createQueryBuilder('u')
			->select('u, g')
			->leftJoin('u.groups', 'g')
            ->where('u.active=true')
			->andWhere('g.id IN(:groups)')
			->setParameter('groups', $groups)
			->orderBy('u.id', 'ASC')
            ->getQuery()
			->getResult();
	}

	public function findAllActive()
	{
        return $this
            ->createQueryBuilder('u')
            ->where('u.active=true')
            ->getQuery()
			->getResult();
	}
	
	public function exist($email)
	{
        return $this
            ->createQueryBuilder('u')
			->select('COUNT(u.id)')
            ->where('u.email=:email')
            ->setParameter('email', $email)
            ->getQuery()
			->getSingleScalarResult() > 0;
	}

	public function loadUserByUsername($username)
    {
        $q = $this
            ->createQueryBuilder('u')
			->select('u, r, p')
			->leftJoin('u.roles', 'r')
			->leftJoin('u.profile', 'p')
            ->where('u.email = :email')
			->andWhere('u.active=true')
            ->setParameter('email', $username)
            ->getQuery();

        try {
            // The Query::getSingleResult() method throws an exception
            // if there is no record matching the criteria.
            $user = $q->getSingleResult();
        } catch (NoResultException $e) {
            $message = sprintf(
                'Unable to find an active admin AcmeUserBundle:User object identified by "%s".',
                $username
            );
            throw new UsernameNotFoundException($message, 0, $e);
        }

        return $user;
    }
	
	public function refreshUser(UserInterface $user)
    {
        $class = get_class($user);
        if (!$this->supportsClass($class)) {
            throw new UnsupportedUserException(
                sprintf(
                    'Instances of "%s" are not supported.',
                    $class
                )
            );
        }

        return $this->find($user->getId());
    }

	public function supportsClass($class)
    {
        return $this->getEntityName() === $class
            || is_subclass_of($class, $this->getEntityName());
    }
}
